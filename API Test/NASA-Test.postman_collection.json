{
	"info": {
		"_postman_id": "f8d5fc5a-62c5-4432-b1f1-d2ec031e6f50",
		"name": "NASA-Test1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31275728"
	},
	"item": [
		{
			"name": "test1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Date is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"HDURL is a valid URL\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.hdurl).to.be.a('string').and.to.match(/^http(s)?:\\/\\/\\S+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Media type is either 'image' or 'video'\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.media_type).to.exist.and.to.satisfy(function (value) {\r",
							"    return value === 'image' || value === 'video';\r",
							"  }, \"Media type should be either 'image' or 'video'\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Explanation is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.explanation).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Explanation should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"HDURL is not empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.hdurl).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Title is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});pm.test(\"Response body size is greater than 0\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.lengthOf.above(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"planetary",
						"apod"
					],
					"query": [
						{
							"key": "api_key",
							"value": "DEMO_KEY"
						}
					]
				}
			},
			"response": []
		}
	]
}